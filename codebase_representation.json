{
    ".eslintrc.js": "module.exports = {\n  root: true,\n  extends: 'airbnb-base',\n  env: {\n    browser: true,\n  },\n  parser: '@babel/eslint-parser',\n  parserOptions: {\n    allowImportExportEverywhere: true,\n    sourceType: 'module',\n    requireConfigFile: false,\n  },\n  rules: {\n    'import/extensions': ['error', { js: 'always' }], // require js file extensions in imports\n    'linebreak-style': ['error', 'unix'], // enforce unix linebreaks\n    'no-param-reassign': [2, { props: false }], // allow modifying properties of param\n  },\n};\n",
    "blocks": {
        "footer": {
            "footer.css": "footer {\n  background-color: var(--light-color);\n  font-size: var(--body-font-size-xs);\n}\n\nfooter .footer > div {\n  margin: auto;\n  max-width: 1200px;\n  padding: 40px 24px 24px;\n}\n\nfooter .footer p {\n  margin: 0;\n}\n\n@media (width >= 900px) {\n  footer .footer > div {\n    padding: 40px 32px 24px;\n  }\n}\n",
            "footer.js": "import { getMetadata } from '../../scripts/aem.js';\nimport { loadFragment } from '../fragment/fragment.js';\n\n/**\n * loads and decorates the footer\n * @param {Element} block The footer block element\n */\nexport default async function decorate(block) {\n  // load footer as fragment\n  const footerMeta = getMetadata('footer');\n  const footerPath = footerMeta ? new URL(footerMeta, window.location).pathname : '/footer';\n  const fragment = await loadFragment(footerPath);\n\n  // decorate footer DOM\n  block.textContent = '';\n  const footer = document.createElement('div');\n  while (fragment.firstElementChild) footer.append(fragment.firstElementChild);\n\n  block.append(footer);\n}\n"
        },
        "cards": {
            "cards.js": "import { createOptimizedPicture } from '../../scripts/aem.js';\n\nexport default function decorate(block) {\n  /* change to ul, li */\n  const ul = document.createElement('ul');\n  [...block.children].forEach((row) => {\n    const li = document.createElement('li');\n    while (row.firstElementChild) li.append(row.firstElementChild);\n    [...li.children].forEach((div) => {\n      if (div.children.length === 1 && div.querySelector('picture')) div.className = 'cards-card-image';\n      else div.className = 'cards-card-body';\n    });\n    ul.append(li);\n  });\n  ul.querySelectorAll('picture > img').forEach((img) => img.closest('picture').replaceWith(createOptimizedPicture(img.src, img.alt, false, [{ width: '750' }])));\n  block.textContent = '';\n  block.append(ul);\n}\n",
            "cards.css": ".cards > ul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(257px, 1fr));\n  grid-gap: 24px;\n}\n\n.cards > ul > li {\n  border: 1px solid #dadada;\n  background-color: var(--background-color);\n}\n\n.cards .cards-card-body {\n  margin: 16px;\n}\n\n.cards .cards-card-image {\n  line-height: 0;\n}\n\n.cards > ul > li img {\n  width: 100%;\n  aspect-ratio: 4 / 3;\n  object-fit: cover;\n}\n"
        },
        "fragment": {
            "fragment.js": "/*\n * Fragment Block\n * Include content on a page as a fragment.\n * https://www.aem.live/developer/block-collection/fragment\n */\n\nimport {\n  decorateMain,\n} from '../../scripts/scripts.js';\n\nimport {\n  loadSections,\n} from '../../scripts/aem.js';\n\n/**\n * Loads a fragment.\n * @param {string} path The path to the fragment\n * @returns {HTMLElement} The root element of the fragment\n */\nexport async function loadFragment(path) {\n  if (path && path.startsWith('/')) {\n    const resp = await fetch(`${path}.plain.html`);\n    if (resp.ok) {\n      const main = document.createElement('main');\n      main.innerHTML = await resp.text();\n\n      // reset base path for media to fragment base\n      const resetAttributeBase = (tag, attr) => {\n        main.querySelectorAll(`${tag}[${attr}^=\"./media_\"]`).forEach((elem) => {\n          elem[attr] = new URL(elem.getAttribute(attr), new URL(path, window.location)).href;\n        });\n      };\n      resetAttributeBase('img', 'src');\n      resetAttributeBase('source', 'srcset');\n\n      decorateMain(main);\n      await loadSections(main);\n      return main;\n    }\n  }\n  return null;\n}\n\nexport default async function decorate(block) {\n  const link = block.querySelector('a');\n  const path = link ? link.getAttribute('href') : block.textContent.trim();\n  const fragment = await loadFragment(path);\n  if (fragment) {\n    const fragmentSection = fragment.querySelector(':scope .section');\n    if (fragmentSection) {\n      block.closest('.section').classList.add(...fragmentSection.classList);\n      block.closest('.fragment').replaceWith(...fragment.childNodes);\n    }\n  }\n}\n",
            "fragment.css": "/* stylelint-disable no-empty-source */\n"
        },
        "columns": {
            "columns.css": ".columns > div {\n  display: flex;\n  flex-direction: column;\n}\n\n.columns img {\n  width: 100%;\n}\n\n.columns > div > div {\n  order: 1;\n}\n\n.columns > div > .columns-img-col {\n  order: 0;\n}\n\n.columns > div > .columns-img-col img {\n  display: block;\n}\n\n@media (width >= 900px) {\n  .columns > div {\n    align-items: center;\n    flex-direction: unset;\n    gap: 24px;\n  }\n\n  .columns > div > div {\n    flex: 1;\n    order: unset;\n  }\n}\n",
            "columns.js": "export default function decorate(block) {\n  const cols = [...block.firstElementChild.children];\n  block.classList.add(`columns-${cols.length}-cols`);\n\n  // setup image columns\n  [...block.children].forEach((row) => {\n    [...row.children].forEach((col) => {\n      const pic = col.querySelector('picture');\n      if (pic) {\n        const picWrapper = pic.closest('div');\n        if (picWrapper && picWrapper.children.length === 1) {\n          // picture is only content in column\n          picWrapper.classList.add('columns-img-col');\n        }\n      }\n    });\n  });\n}\n"
        },
        "hero": {
            "hero.css": ".hero-container .hero-wrapper {\n  max-width: unset;\n  padding: 0;\n}\n\n.hero {\n  position: relative;\n  padding: 40px 24px;\n  min-height: 300px;\n}\n\n.hero h1 {\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  color: var(--background-color);\n}\n\n.hero picture {\n  position: absolute;\n  z-index: -1;\n  inset: 0;\n  object-fit: cover;\n  box-sizing: border-box;\n}\n\n.hero img {\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n\n@media (width >= 900px) {\n  .hero {\n    padding: 40px 32px;\n  }\n}",
            "hero.js": ""
        },
        "header": {
            "header.js": "import { getMetadata } from '../../scripts/aem.js';\nimport { loadFragment } from '../fragment/fragment.js';\n\n// media query match that indicates mobile/tablet width\nconst isDesktop = window.matchMedia('(min-width: 900px)');\n\nfunction closeOnEscape(e) {\n  if (e.code === 'Escape') {\n    const nav = document.getElementById('nav');\n    const navSections = nav.querySelector('.nav-sections');\n    const navSectionExpanded = navSections.querySelector('[aria-expanded=\"true\"]');\n    if (navSectionExpanded && isDesktop.matches) {\n      // eslint-disable-next-line no-use-before-define\n      toggleAllNavSections(navSections);\n      navSectionExpanded.focus();\n    } else if (!isDesktop.matches) {\n      // eslint-disable-next-line no-use-before-define\n      toggleMenu(nav, navSections);\n      nav.querySelector('button').focus();\n    }\n  }\n}\n\nfunction closeOnFocusLost(e) {\n  const nav = e.currentTarget;\n  if (!nav.contains(e.relatedTarget)) {\n    const navSections = nav.querySelector('.nav-sections');\n    const navSectionExpanded = navSections.querySelector('[aria-expanded=\"true\"]');\n    if (navSectionExpanded && isDesktop.matches) {\n      // eslint-disable-next-line no-use-before-define\n      toggleAllNavSections(navSections, false);\n    } else if (!isDesktop.matches) {\n      // eslint-disable-next-line no-use-before-define\n      toggleMenu(nav, navSections, false);\n    }\n  }\n}\n\nfunction openOnKeydown(e) {\n  const focused = document.activeElement;\n  const isNavDrop = focused.className === 'nav-drop';\n  if (isNavDrop && (e.code === 'Enter' || e.code === 'Space')) {\n    const dropExpanded = focused.getAttribute('aria-expanded') === 'true';\n    // eslint-disable-next-line no-use-before-define\n    toggleAllNavSections(focused.closest('.nav-sections'));\n    focused.setAttribute('aria-expanded', dropExpanded ? 'false' : 'true');\n  }\n}\n\nfunction focusNavSection() {\n  document.activeElement.addEventListener('keydown', openOnKeydown);\n}\n\n/**\n * Toggles all nav sections\n * @param {Element} sections The container element\n * @param {Boolean} expanded Whether the element should be expanded or collapsed\n */\nfunction toggleAllNavSections(sections, expanded = false) {\n  sections.querySelectorAll('.nav-sections .default-content-wrapper > ul > li').forEach((section) => {\n    section.setAttribute('aria-expanded', expanded);\n  });\n}\n\n/**\n * Toggles the entire nav\n * @param {Element} nav The container element\n * @param {Element} navSections The nav sections within the container element\n * @param {*} forceExpanded Optional param to force nav expand behavior when not null\n */\nfunction toggleMenu(nav, navSections, forceExpanded = null) {\n  const expanded = forceExpanded !== null ? !forceExpanded : nav.getAttribute('aria-expanded') === 'true';\n  const button = nav.querySelector('.nav-hamburger button');\n  document.body.style.overflowY = (expanded || isDesktop.matches) ? '' : 'hidden';\n  nav.setAttribute('aria-expanded', expanded ? 'false' : 'true');\n  toggleAllNavSections(navSections, expanded || isDesktop.matches ? 'false' : 'true');\n  button.setAttribute('aria-label', expanded ? 'Open navigation' : 'Close navigation');\n  // enable nav dropdown keyboard accessibility\n  const navDrops = navSections.querySelectorAll('.nav-drop');\n  if (isDesktop.matches) {\n    navDrops.forEach((drop) => {\n      if (!drop.hasAttribute('tabindex')) {\n        drop.setAttribute('tabindex', 0);\n        drop.addEventListener('focus', focusNavSection);\n      }\n    });\n  } else {\n    navDrops.forEach((drop) => {\n      drop.removeAttribute('tabindex');\n      drop.removeEventListener('focus', focusNavSection);\n    });\n  }\n\n  // enable menu collapse on escape keypress\n  if (!expanded || isDesktop.matches) {\n    // collapse menu on escape press\n    window.addEventListener('keydown', closeOnEscape);\n    // collapse menu on focus lost\n    nav.addEventListener('focusout', closeOnFocusLost);\n  } else {\n    window.removeEventListener('keydown', closeOnEscape);\n    nav.removeEventListener('focusout', closeOnFocusLost);\n  }\n}\n\n/**\n * loads and decorates the header, mainly the nav\n * @param {Element} block The header block element\n */\nexport default async function decorate(block) {\n  // load nav as fragment\n  const navMeta = getMetadata('nav');\n  const navPath = navMeta ? new URL(navMeta, window.location).pathname : '/nav';\n  const fragment = await loadFragment(navPath);\n\n  // decorate nav DOM\n  block.textContent = '';\n  const nav = document.createElement('nav');\n  nav.id = 'nav';\n  while (fragment.firstElementChild) nav.append(fragment.firstElementChild);\n\n  const classes = ['brand', 'sections', 'tools'];\n  classes.forEach((c, i) => {\n    const section = nav.children[i];\n    if (section) section.classList.add(`nav-${c}`);\n  });\n\n  const navBrand = nav.querySelector('.nav-brand');\n  const brandLink = navBrand.querySelector('.button');\n  if (brandLink) {\n    brandLink.className = '';\n    brandLink.closest('.button-container').className = '';\n  }\n\n  const navSections = nav.querySelector('.nav-sections');\n  if (navSections) {\n    navSections.querySelectorAll(':scope .default-content-wrapper > ul > li').forEach((navSection) => {\n      if (navSection.querySelector('ul')) navSection.classList.add('nav-drop');\n      navSection.addEventListener('click', () => {\n        if (isDesktop.matches) {\n          const expanded = navSection.getAttribute('aria-expanded') === 'true';\n          toggleAllNavSections(navSections);\n          navSection.setAttribute('aria-expanded', expanded ? 'false' : 'true');\n        }\n      });\n    });\n  }\n\n  // hamburger for mobile\n  const hamburger = document.createElement('div');\n  hamburger.classList.add('nav-hamburger');\n  hamburger.innerHTML = `<button type=\"button\" aria-controls=\"nav\" aria-label=\"Open navigation\">\n      <span class=\"nav-hamburger-icon\"></span>\n    </button>`;\n  hamburger.addEventListener('click', () => toggleMenu(nav, navSections));\n  nav.prepend(hamburger);\n  nav.setAttribute('aria-expanded', 'false');\n  // prevent mobile nav behavior on window resize\n  toggleMenu(nav, navSections, isDesktop.matches);\n  isDesktop.addEventListener('change', () => toggleMenu(nav, navSections, isDesktop.matches));\n\n  const navWrapper = document.createElement('div');\n  navWrapper.className = 'nav-wrapper';\n  navWrapper.append(nav);\n  block.append(navWrapper);\n}\n",
            "header.css": "/* header and nav layout */\nheader .nav-wrapper {\n  background-color: var(--background-color);\n  width: 100%;\n  z-index: 2;\n  position: fixed;\n}\n\nheader nav {\n  box-sizing: border-box;\n  display: grid;\n  grid-template:\n    'hamburger brand tools' var(--nav-height)\n    'sections sections sections' 1fr / auto 1fr auto;\n  align-items: center;\n  gap: 0 24px;\n  margin: auto;\n  max-width: 1248px;\n  height: var(--nav-height);\n  padding: 0 24px;\n  font-family: var(--body-font-family);\n}\n\nheader nav[aria-expanded='true'] {\n  grid-template:\n    'hamburger brand' var(--nav-height)\n    'sections sections' 1fr\n    'tools tools' var(--nav-height) / auto 1fr;\n  overflow-y: auto;\n  min-height: 100dvh;\n}\n\n@media (width >= 900px) {\n  header nav {\n    display: flex;\n    justify-content: space-between;\n    gap: 0 32px;\n    max-width: 1264px;\n    padding: 0 32px;\n  }\n\n  header nav[aria-expanded='true'] {\n    min-height: 0;\n    overflow: visible;\n  }\n}\n\nheader nav p {\n  margin: 0;\n  line-height: 1;\n}\n\nheader nav a:any-link {\n  color: currentcolor;\n}\n\n/* hamburger */\nheader nav .nav-hamburger {\n  grid-area: hamburger;\n  height: 22px;\n  display: flex;\n  align-items: center;\n}\n\nheader nav .nav-hamburger button {\n  height: 22px;\n  margin: 0;\n  border: 0;\n  border-radius: 0;\n  padding: 0;\n  background-color: var(--background-color);\n  color: inherit;\n  overflow: initial;\n  text-overflow: initial;\n  white-space: initial;\n}\n\nheader nav .nav-hamburger-icon,\nheader nav .nav-hamburger-icon::before,\nheader nav .nav-hamburger-icon::after {\n  box-sizing: border-box;\n  display: block;\n  position: relative;\n  width: 20px;\n}\n\nheader nav .nav-hamburger-icon::before,\nheader nav .nav-hamburger-icon::after {\n  content: '';\n  position: absolute;\n  background: currentcolor;\n}\n\nheader nav[aria-expanded='false'] .nav-hamburger-icon,\nheader nav[aria-expanded='false'] .nav-hamburger-icon::before,\nheader nav[aria-expanded='false'] .nav-hamburger-icon::after {\n  height: 2px;\n  border-radius: 2px;\n  background: currentcolor;\n}\n\nheader nav[aria-expanded='false'] .nav-hamburger-icon::before {\n  top: -6px;\n}\n\nheader nav[aria-expanded='false'] .nav-hamburger-icon::after {\n  top: 6px;\n}\n\nheader nav[aria-expanded='true'] .nav-hamburger-icon {\n  height: 22px;\n}\n\nheader nav[aria-expanded='true'] .nav-hamburger-icon::before,\nheader nav[aria-expanded='true'] .nav-hamburger-icon::after {\n  top: 3px;\n  left: 1px;\n  transform: rotate(45deg);\n  transform-origin: 2px 1px;\n  width: 24px;\n  height: 2px;\n  border-radius: 2px;\n}\n\nheader nav[aria-expanded='true'] .nav-hamburger-icon::after {\n  top: unset;\n  bottom: 3px;\n  transform: rotate(-45deg);\n}\n\n@media (width >= 900px) {\n  header nav .nav-hamburger {\n    display: none;\n    visibility: hidden;\n  }\n}\n\n/* brand */\nheader .nav-brand {\n  grid-area: brand;\n  flex-basis: 128px;\n  font-size: var(--heading-font-size-s);\n  font-weight: 700;\n  line-height: 1;\n}\n\nheader nav .nav-brand img {\n  width: 128px;\n  height: auto;\n}\n\n/* sections */\nheader nav .nav-sections {\n  grid-area: sections;\n  flex: 1 1 auto;\n  display: none;\n  visibility: hidden;\n}\n\nheader nav[aria-expanded='true'] .nav-sections {\n  display: block;\n  visibility: visible;\n  align-self: start;\n}\n\nheader nav .nav-sections ul {\n  list-style: none;\n  padding-left: 0;\n  font-size: var(--body-font-size-s);\n}\n\nheader nav .nav-sections ul > li {\n  font-weight: 500;\n}\n\nheader nav .nav-sections ul > li > ul {\n  margin-top: 0;\n}\n\nheader nav .nav-sections ul > li > ul > li {\n  font-weight: 400;\n}\n\n@media (width >= 900px) {\n  header nav .nav-sections {\n    display: block;\n    visibility: visible;\n    white-space: nowrap;\n  }\n\n  header nav[aria-expanded='true'] .nav-sections {\n    align-self: unset;\n  }\n\n  header nav .nav-sections .nav-drop {\n    position: relative;\n    padding-right: 16px;\n    cursor: pointer;\n  }\n\n  header nav .nav-sections .nav-drop::after {\n    content: '';\n    display: inline-block;\n    position: absolute;\n    top: 0.5em;\n    right: 2px;\n    transform: rotate(135deg);\n    width: 6px;\n    height: 6px;\n    border: 2px solid currentcolor;\n    border-radius: 0 1px 0 0;\n    border-width: 2px 2px 0 0;\n  }\n\n  header nav .nav-sections .nav-drop[aria-expanded='true']::after {\n    top: unset;\n    bottom: 0.5em;\n    transform: rotate(315deg);\n  }\n\n  header nav .nav-sections ul {\n    display: flex;\n    gap: 24px;\n    margin: 0;\n  }\n\n  header nav .nav-sections .default-content-wrapper > ul > li {\n    flex: 0 1 auto;\n    position: relative;\n  }\n\n  header nav .nav-sections .default-content-wrapper > ul > li > ul {\n    display: none;\n    position: relative;\n  }\n\n  header nav .nav-sections .default-content-wrapper > ul > li[aria-expanded='true'] > ul {\n    display: block;\n    position: absolute;\n    left: -24px;\n    width: 200px;\n    top: 150%;\n    padding: 16px;\n    background-color: var(--light-color);\n    white-space: initial;\n  }\n\n  header nav .nav-sections .default-content-wrapper > ul > li > ul::before {\n    content: '';\n    position: absolute;\n    top: -8px;\n    left: 16px;\n    width: 0;\n    height: 0;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-bottom: 8px solid var(--light-color);\n  }\n\n  header nav .nav-sections .default-content-wrapper > ul > li > ul > li {\n    padding: 8px 0;\n  }\n}\n\n/* tools */\nheader nav .nav-tools {\n  grid-area: tools;\n}\n"
        }
    },
    "styles": {
        "styles.css": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n:root {\n  /* colors */\n  --background-color: white;\n  --light-color: #f8f8f8;\n  --dark-color: #505050;\n  --text-color: #131313;\n  --link-color: #3b63fb;\n  --link-hover-color: #1d3ecf;\n\n  /* fonts */\n  --body-font-family: roboto, roboto-fallback, sans-serif;\n  --heading-font-family: roboto-condensed, roboto-condensed-fallback, sans-serif;\n\n  /* body sizes */\n  --body-font-size-m: 22px;\n  --body-font-size-s: 19px;\n  --body-font-size-xs: 17px;\n\n  /* heading sizes */\n  --heading-font-size-xxl: 55px;\n  --heading-font-size-xl: 44px;\n  --heading-font-size-l: 34px;\n  --heading-font-size-m: 27px;\n  --heading-font-size-s: 24px;\n  --heading-font-size-xs: 22px;\n\n  /* nav height */\n  --nav-height: 64px;\n}\n\n/* fallback fonts */\n@font-face {\n  font-family: roboto-condensed-fallback;\n  size-adjust: 88.82%;\n  src: local('Arial');\n}\n\n@font-face {\n  font-family: roboto-fallback;\n  size-adjust: 99.529%;\n  src: local('Arial');\n}\n\n@media (width >= 900px) {\n  :root {\n    /* body sizes */\n    --body-font-size-m: 18px;\n    --body-font-size-s: 16px;\n    --body-font-size-xs: 14px;\n\n    /* heading sizes */\n    --heading-font-size-xxl: 45px;\n    --heading-font-size-xl: 36px;\n    --heading-font-size-l: 28px;\n    --heading-font-size-m: 22px;\n    --heading-font-size-s: 20px;\n    --heading-font-size-xs: 18px;\n  }\n}\n\nbody {\n  display: none;\n  margin: 0;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  font-family: var(--body-font-family);\n  font-size: var(--body-font-size-m);\n  line-height: 1.6;\n}\n\nbody.appear {\n  display: block;\n}\n\nheader {\n  height: var(--nav-height);\n}\n\nheader .header,\nfooter .footer {\n  visibility: hidden;\n}\n\nheader .header[data-block-status=\"loaded\"],\nfooter .footer[data-block-status=\"loaded\"] {\n  visibility: visible;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-top: 0.8em;\n  margin-bottom: 0.25em;\n  font-family: var(--heading-font-family);\n  font-weight: 600;\n  line-height: 1.25;\n  scroll-margin: 40px;\n}\n\nh1 { font-size: var(--heading-font-size-xxl); }\nh2 { font-size: var(--heading-font-size-xl); }\nh3 { font-size: var(--heading-font-size-l); }\nh4 { font-size: var(--heading-font-size-m); }\nh5 { font-size: var(--heading-font-size-s); }\nh6 { font-size: var(--heading-font-size-xs); }\n\np,\ndl,\nol,\nul,\npre,\nblockquote {\n  margin-top: 0.8em;\n  margin-bottom: 0.25em;\n}\n\ncode,\npre {\n  font-size: var(--body-font-size-s);\n}\n\npre {\n  padding: 16px;\n  border-radius: 8px;\n  background-color: var(--light-color);\n  overflow-x: auto;\n  white-space: pre;\n}\n\nmain > div {\n  margin: 40px 16px;\n}\n\ninput,\ntextarea,\nselect,\nbutton {\n  font: inherit;\n}\n\n/* links */\na:any-link {\n  color: var(--link-color);\n  text-decoration: none;\n  overflow-wrap: break-word;\n}\n\na:hover {\n  color: var(--link-hover-color);\n  text-decoration: underline;\n}\n\n/* buttons */\na.button:any-link,\nbutton {\n  box-sizing: border-box;\n  display: inline-block;\n  max-width: 100%;\n  margin: 12px 0;\n  border: 2px solid transparent;\n  border-radius: 2.4em;\n  padding: 0.5em 1.2em;\n  font-family: var(--body-font-family);\n  font-style: normal;\n  font-weight: 500;\n  line-height: 1.25;\n  text-align: center;\n  text-decoration: none;\n  background-color: var(--link-color);\n  color: var(--background-color);\n  cursor: pointer;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\na.button:hover,\na.button:focus,\nbutton:hover,\nbutton:focus {\n  background-color: var(--link-hover-color);\n  cursor: pointer;\n}\n\nbutton:disabled,\nbutton:disabled:hover {\n  background-color: var(--light-color);\n  cursor: unset;\n}\n\na.button.secondary,\nbutton.secondary {\n  background-color: unset;\n  border: 2px solid currentcolor;\n  color: var(--text-color);\n}\n\nmain img {\n  max-width: 100%;\n  width: auto;\n  height: auto;\n}\n\n.icon {\n  display: inline-block;\n  height: 24px;\n  width: 24px;\n}\n\n.icon img {\n  height: 100%;\n  width: 100%;\n}\n\n/* sections */\nmain > .section {\n  margin: 40px 0;\n}\n\nmain > .section > div {\n  max-width: 1200px;\n  margin: auto;\n  padding: 0 24px;\n}\n\nmain > .section:first-of-type {\n  margin-top: 0;\n}\n\n@media (width >= 900px) {\n  main > .section > div {\n    padding: 0 32px;\n  }\n}\n\n/* section metadata */\nmain .section.light,\nmain .section.highlight {\n  background-color: var(--light-color);\n  margin: 0;\n  padding: 40px 0;\n}\n",
        "lazy-styles.css": "/* add global styles that can be loaded post LCP here */\n",
        "fonts.css": "/* stylelint-disable max-line-length */\n@font-face {\n  font-family: roboto-condensed;\n  font-style: normal;\n  font-weight: 700;\n  font-display: swap;\n  src: url('../fonts/roboto-condensed-bold.woff2') format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: roboto;\n  font-style: normal;\n  font-weight: 700;\n  font-display: swap;\n  src: url('../fonts/roboto-bold.woff2') format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: roboto;\n  font-style: normal;\n  font-weight: 500;\n  font-display: swap;\n  src: url('../fonts/roboto-medium.woff2') format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: roboto;\n  font-style: normal;\n  font-weight: 400;\n  font-display: swap;\n  src: url('../fonts/roboto-regular.woff2') format('woff2');\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n"
    },
    "icons": {},
    "scripts": {
        "scripts.js": "import {\n  buildBlock,\n  loadHeader,\n  loadFooter,\n  decorateButtons,\n  decorateIcons,\n  decorateSections,\n  decorateBlocks,\n  decorateTemplateAndTheme,\n  waitForFirstImage,\n  loadSection,\n  loadSections,\n  loadCSS,\n} from './aem.js';\n\n/**\n * Builds hero block and prepends to main in a new section.\n * @param {Element} main The container element\n */\nfunction buildHeroBlock(main) {\n  const h1 = main.querySelector('h1');\n  const picture = main.querySelector('picture');\n  // eslint-disable-next-line no-bitwise\n  if (h1 && picture && (h1.compareDocumentPosition(picture) & Node.DOCUMENT_POSITION_PRECEDING)) {\n    const section = document.createElement('div');\n    section.append(buildBlock('hero', { elems: [picture, h1] }));\n    main.prepend(section);\n  }\n}\n\n/**\n * load fonts.css and set a session storage flag\n */\nasync function loadFonts() {\n  await loadCSS(`${window.hlx.codeBasePath}/styles/fonts.css`);\n  try {\n    if (!window.location.hostname.includes('localhost')) sessionStorage.setItem('fonts-loaded', 'true');\n  } catch (e) {\n    // do nothing\n  }\n}\n\n/**\n * Builds all synthetic blocks in a container element.\n * @param {Element} main The container element\n */\nfunction buildAutoBlocks(main) {\n  try {\n    buildHeroBlock(main);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Auto Blocking failed', error);\n  }\n}\n\n/**\n * Decorates the main element.\n * @param {Element} main The main element\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function decorateMain(main) {\n  // hopefully forward compatible button decoration\n  decorateButtons(main);\n  decorateIcons(main);\n  buildAutoBlocks(main);\n  decorateSections(main);\n  decorateBlocks(main);\n}\n\n/**\n * Loads everything needed to get to LCP.\n * @param {Element} doc The container element\n */\nasync function loadEager(doc) {\n  document.documentElement.lang = 'en';\n  decorateTemplateAndTheme();\n  const main = doc.querySelector('main');\n  if (main) {\n    decorateMain(main);\n    document.body.classList.add('appear');\n    await loadSection(main.querySelector('.section'), waitForFirstImage);\n  }\n\n  try {\n    /* if desktop (proxy for fast connection) or fonts already loaded, load fonts.css */\n    if (window.innerWidth >= 900 || sessionStorage.getItem('fonts-loaded')) {\n      loadFonts();\n    }\n  } catch (e) {\n    // do nothing\n  }\n}\n\n/**\n * Loads everything that doesn't need to be delayed.\n * @param {Element} doc The container element\n */\nasync function loadLazy(doc) {\n  const main = doc.querySelector('main');\n  await loadSections(main);\n\n  const { hash } = window.location;\n  const element = hash ? doc.getElementById(hash.substring(1)) : false;\n  if (hash && element) element.scrollIntoView();\n\n  loadHeader(doc.querySelector('header'));\n  loadFooter(doc.querySelector('footer'));\n\n  loadCSS(`${window.hlx.codeBasePath}/styles/lazy-styles.css`);\n  loadFonts();\n}\n\n/**\n * Loads everything that happens a lot later,\n * without impacting the user experience.\n */\nfunction loadDelayed() {\n  // eslint-disable-next-line import/no-cycle\n  window.setTimeout(() => import('./delayed.js'), 3000);\n  // load anything that can be postponed to the latest here\n}\n\nasync function loadPage() {\n  await loadEager(document);\n  await loadLazy(document);\n  loadDelayed();\n}\n\nloadPage();\n",
        "delayed.js": "// add delayed functionality here\n",
        "aem.js": "/*\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/* eslint-env browser */\nfunction sampleRUM(checkpoint, data) {\n  // eslint-disable-next-line max-len\n  const timeShift = () => (window.performance ? window.performance.now() : Date.now() - window.hlx.rum.firstReadTime);\n  try {\n    window.hlx = window.hlx || {};\n    if (!window.hlx.rum) {\n      sampleRUM.enhance = () => {};\n      const param = new URLSearchParams(window.location.search).get('rum');\n      const weight = (param === 'on' && 1)\n        || (window.SAMPLE_PAGEVIEWS_AT_RATE === 'high' && 10)\n        || (window.SAMPLE_PAGEVIEWS_AT_RATE === 'low' && 1000)\n        || 100;\n      const id = Math.random().toString(36).slice(-4);\n      const isSelected = param !== 'off' && Math.random() * weight < 1;\n      // eslint-disable-next-line object-curly-newline, max-len\n      window.hlx.rum = {\n        weight,\n        id,\n        isSelected,\n        firstReadTime: window.performance ? window.performance.timeOrigin : Date.now(),\n        sampleRUM,\n        queue: [],\n        collector: (...args) => window.hlx.rum.queue.push(args),\n      };\n      if (isSelected) {\n        const dataFromErrorObj = (error) => {\n          const errData = { source: 'undefined error' };\n          try {\n            errData.target = error.toString();\n            errData.source = error.stack\n              .split('\\n')\n              .filter((line) => line.match(/https?:\\/\\//))\n              .shift()\n              .replace(/at ([^ ]+) \\((.+)\\)/, '$1@$2')\n              .replace(/ at /, '@')\n              .trim();\n          } catch (err) {\n            /* error structure was not as expected */\n          }\n          return errData;\n        };\n\n        window.addEventListener('error', ({ error }) => {\n          const errData = dataFromErrorObj(error);\n          sampleRUM('error', errData);\n        });\n\n        window.addEventListener('unhandledrejection', ({ reason }) => {\n          let errData = {\n            source: 'Unhandled Rejection',\n            target: reason || 'Unknown',\n          };\n          if (reason instanceof Error) {\n            errData = dataFromErrorObj(reason);\n          }\n          sampleRUM('error', errData);\n        });\n\n        sampleRUM.baseURL = sampleRUM.baseURL || new URL(window.RUM_BASE || '/', new URL('https://rum.hlx.page'));\n        sampleRUM.collectBaseURL = sampleRUM.collectBaseURL || sampleRUM.baseURL;\n        sampleRUM.sendPing = (ck, time, pingData = {}) => {\n          // eslint-disable-next-line max-len, object-curly-newline\n          const rumData = JSON.stringify({\n            weight,\n            id,\n            referer: window.location.href,\n            checkpoint: ck,\n            t: time,\n            ...pingData,\n          });\n          const urlParams = window.RUM_PARAMS\n            ? `?${new URLSearchParams(window.RUM_PARAMS).toString()}`\n            : '';\n          const { href: url, origin } = new URL(\n            `.rum/${weight}${urlParams}`,\n            sampleRUM.collectBaseURL,\n          );\n          const body = origin === window.location.origin\n            ? new Blob([rumData], { type: 'application/json' })\n            : rumData;\n          navigator.sendBeacon(url, body);\n          // eslint-disable-next-line no-console\n          console.debug(`ping:${ck}`, pingData);\n        };\n        sampleRUM.sendPing('top', timeShift());\n\n        sampleRUM.enhance = () => {\n          // only enhance once\n          if (document.querySelector('script[src*=\"rum-enhancer\"]')) return;\n          const { enhancerVersion, enhancerHash } = sampleRUM.enhancerContext || {};\n          const script = document.createElement('script');\n          if (enhancerHash) {\n            script.integrity = enhancerHash;\n            script.setAttribute('crossorigin', 'anonymous');\n          }\n          script.src = new URL(\n            `.rum/@adobe/helix-rum-enhancer@${enhancerVersion || '^2'}/src/index.js`,\n            sampleRUM.baseURL,\n          ).href;\n          document.head.appendChild(script);\n        };\n        if (!window.hlx.RUM_MANUAL_ENHANCE) {\n          sampleRUM.enhance();\n        }\n      }\n    }\n    if (window.hlx.rum && window.hlx.rum.isSelected && checkpoint) {\n      window.hlx.rum.collector(checkpoint, data, timeShift());\n    }\n    document.dispatchEvent(new CustomEvent('rum', { detail: { checkpoint, data } }));\n  } catch (error) {\n    // something went awry\n  }\n}\n\n/**\n * Setup block utils.\n */\nfunction setup() {\n  window.hlx = window.hlx || {};\n  window.hlx.RUM_MASK_URL = 'full';\n  window.hlx.RUM_MANUAL_ENHANCE = true;\n  window.hlx.codeBasePath = '';\n  window.hlx.lighthouse = new URLSearchParams(window.location.search).get('lighthouse') === 'on';\n\n  const scriptEl = document.querySelector('script[src$=\"/scripts/scripts.js\"]');\n  if (scriptEl) {\n    try {\n      [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split('/scripts/scripts.js');\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  }\n}\n\n/**\n * Auto initialization.\n */\n\nfunction init() {\n  setup();\n  sampleRUM.collectBaseURL = window.origin;\n  sampleRUM();\n}\n\n/**\n * Sanitizes a string for use as class name.\n * @param {string} name The unsanitized string\n * @returns {string} The class name\n */\nfunction toClassName(name) {\n  return typeof name === 'string'\n    ? name\n      .toLowerCase()\n      .replace(/[^0-9a-z]/gi, '-')\n      .replace(/-+/g, '-')\n      .replace(/^-|-$/g, '')\n    : '';\n}\n\n/**\n * Sanitizes a string for use as a js property name.\n * @param {string} name The unsanitized string\n * @returns {string} The camelCased name\n */\nfunction toCamelCase(name) {\n  return toClassName(name).replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n\n/**\n * Extracts the config from a block.\n * @param {Element} block The block element\n * @returns {object} The block config\n */\n// eslint-disable-next-line import/prefer-default-export\nfunction readBlockConfig(block) {\n  const config = {};\n  block.querySelectorAll(':scope > div').forEach((row) => {\n    if (row.children) {\n      const cols = [...row.children];\n      if (cols[1]) {\n        const col = cols[1];\n        const name = toClassName(cols[0].textContent);\n        let value = '';\n        if (col.querySelector('a')) {\n          const as = [...col.querySelectorAll('a')];\n          if (as.length === 1) {\n            value = as[0].href;\n          } else {\n            value = as.map((a) => a.href);\n          }\n        } else if (col.querySelector('img')) {\n          const imgs = [...col.querySelectorAll('img')];\n          if (imgs.length === 1) {\n            value = imgs[0].src;\n          } else {\n            value = imgs.map((img) => img.src);\n          }\n        } else if (col.querySelector('p')) {\n          const ps = [...col.querySelectorAll('p')];\n          if (ps.length === 1) {\n            value = ps[0].textContent;\n          } else {\n            value = ps.map((p) => p.textContent);\n          }\n        } else value = row.children[1].textContent;\n        config[name] = value;\n      }\n    }\n  });\n  return config;\n}\n\n/**\n * Loads a CSS file.\n * @param {string} href URL to the CSS file\n */\nasync function loadCSS(href) {\n  return new Promise((resolve, reject) => {\n    if (!document.querySelector(`head > link[href=\"${href}\"]`)) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = href;\n      link.onload = resolve;\n      link.onerror = reject;\n      document.head.append(link);\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * Loads a non module JS file.\n * @param {string} src URL to the JS file\n * @param {Object} attrs additional optional attributes\n */\nasync function loadScript(src, attrs) {\n  return new Promise((resolve, reject) => {\n    if (!document.querySelector(`head > script[src=\"${src}\"]`)) {\n      const script = document.createElement('script');\n      script.src = src;\n      if (attrs) {\n        // eslint-disable-next-line no-restricted-syntax, guard-for-in\n        for (const attr in attrs) {\n          script.setAttribute(attr, attrs[attr]);\n        }\n      }\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.append(script);\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * Retrieves the content of metadata tags.\n * @param {string} name The metadata name (or property)\n * @param {Document} doc Document object to query for metadata. Defaults to the window's document\n * @returns {string} The metadata value(s)\n */\nfunction getMetadata(name, doc = document) {\n  const attr = name && name.includes(':') ? 'property' : 'name';\n  const meta = [...doc.head.querySelectorAll(`meta[${attr}=\"${name}\"]`)]\n    .map((m) => m.content)\n    .join(', ');\n  return meta || '';\n}\n\n/**\n * Returns a picture element with webp and fallbacks\n * @param {string} src The image URL\n * @param {string} [alt] The image alternative text\n * @param {boolean} [eager] Set loading attribute to eager\n * @param {Array} [breakpoints] Breakpoints and corresponding params (eg. width)\n * @returns {Element} The picture element\n */\nfunction createOptimizedPicture(\n  src,\n  alt = '',\n  eager = false,\n  breakpoints = [{ media: '(min-width: 600px)', width: '2000' }, { width: '750' }],\n) {\n  const url = new URL(src, window.location.href);\n  const picture = document.createElement('picture');\n  const { pathname } = url;\n  const ext = pathname.substring(pathname.lastIndexOf('.') + 1);\n\n  // webp\n  breakpoints.forEach((br) => {\n    const source = document.createElement('source');\n    if (br.media) source.setAttribute('media', br.media);\n    source.setAttribute('type', 'image/webp');\n    source.setAttribute('srcset', `${pathname}?width=${br.width}&format=webply&optimize=medium`);\n    picture.appendChild(source);\n  });\n\n  // fallback\n  breakpoints.forEach((br, i) => {\n    if (i < breakpoints.length - 1) {\n      const source = document.createElement('source');\n      if (br.media) source.setAttribute('media', br.media);\n      source.setAttribute('srcset', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n      picture.appendChild(source);\n    } else {\n      const img = document.createElement('img');\n      img.setAttribute('loading', eager ? 'eager' : 'lazy');\n      img.setAttribute('alt', alt);\n      picture.appendChild(img);\n      img.setAttribute('src', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n    }\n  });\n\n  return picture;\n}\n\n/**\n * Set template (page structure) and theme (page styles).\n */\nfunction decorateTemplateAndTheme() {\n  const addClasses = (element, classes) => {\n    classes.split(',').forEach((c) => {\n      element.classList.add(toClassName(c.trim()));\n    });\n  };\n  const template = getMetadata('template');\n  if (template) addClasses(document.body, template);\n  const theme = getMetadata('theme');\n  if (theme) addClasses(document.body, theme);\n}\n\n/**\n * Wrap inline text content of block cells within a <p> tag.\n * @param {Element} block the block element\n */\nfunction wrapTextNodes(block) {\n  const validWrappers = [\n    'P',\n    'PRE',\n    'UL',\n    'OL',\n    'PICTURE',\n    'TABLE',\n    'H1',\n    'H2',\n    'H3',\n    'H4',\n    'H5',\n    'H6',\n  ];\n\n  const wrap = (el) => {\n    const wrapper = document.createElement('p');\n    wrapper.append(...el.childNodes);\n    el.append(wrapper);\n  };\n\n  block.querySelectorAll(':scope > div > div').forEach((blockColumn) => {\n    if (blockColumn.hasChildNodes()) {\n      const hasWrapper = !!blockColumn.firstElementChild\n        && validWrappers.some((tagName) => blockColumn.firstElementChild.tagName === tagName);\n      if (!hasWrapper) {\n        wrap(blockColumn);\n      } else if (\n        blockColumn.firstElementChild.tagName === 'PICTURE'\n        && (blockColumn.children.length > 1 || !!blockColumn.textContent.trim())\n      ) {\n        wrap(blockColumn);\n      }\n    }\n  });\n}\n\n/**\n * Decorates paragraphs containing a single link as buttons.\n * @param {Element} element container element\n */\nfunction decorateButtons(element) {\n  element.querySelectorAll('a').forEach((a) => {\n    a.title = a.title || a.textContent;\n    if (a.href !== a.textContent) {\n      const up = a.parentElement;\n      const twoup = a.parentElement.parentElement;\n      if (!a.querySelector('img')) {\n        if (up.childNodes.length === 1 && (up.tagName === 'P' || up.tagName === 'DIV')) {\n          a.className = 'button'; // default\n          up.classList.add('button-container');\n        }\n        if (\n          up.childNodes.length === 1\n          && up.tagName === 'STRONG'\n          && twoup.childNodes.length === 1\n          && twoup.tagName === 'P'\n        ) {\n          a.className = 'button primary';\n          twoup.classList.add('button-container');\n        }\n        if (\n          up.childNodes.length === 1\n          && up.tagName === 'EM'\n          && twoup.childNodes.length === 1\n          && twoup.tagName === 'P'\n        ) {\n          a.className = 'button secondary';\n          twoup.classList.add('button-container');\n        }\n      }\n    }\n  });\n}\n\n/**\n * Add <img> for icon, prefixed with codeBasePath and optional prefix.\n * @param {Element} [span] span element with icon classes\n * @param {string} [prefix] prefix to be added to icon src\n * @param {string} [alt] alt text to be added to icon\n */\nfunction decorateIcon(span, prefix = '', alt = '') {\n  const iconName = Array.from(span.classList)\n    .find((c) => c.startsWith('icon-'))\n    .substring(5);\n  const img = document.createElement('img');\n  img.dataset.iconName = iconName;\n  img.src = `${window.hlx.codeBasePath}${prefix}/icons/${iconName}.svg`;\n  img.alt = alt;\n  img.loading = 'lazy';\n  img.width = 16;\n  img.height = 16;\n  span.append(img);\n}\n\n/**\n * Add <img> for icons, prefixed with codeBasePath and optional prefix.\n * @param {Element} [element] Element containing icons\n * @param {string} [prefix] prefix to be added to icon the src\n */\nfunction decorateIcons(element, prefix = '') {\n  const icons = element.querySelectorAll('span.icon');\n  icons.forEach((span) => {\n    decorateIcon(span, prefix);\n  });\n}\n\n/**\n * Decorates all sections in a container element.\n * @param {Element} main The container element\n */\nfunction decorateSections(main) {\n  main.querySelectorAll(':scope > div').forEach((section) => {\n    const wrappers = [];\n    let defaultContent = false;\n    [...section.children].forEach((e) => {\n      if (e.tagName === 'DIV' || !defaultContent) {\n        const wrapper = document.createElement('div');\n        wrappers.push(wrapper);\n        defaultContent = e.tagName !== 'DIV';\n        if (defaultContent) wrapper.classList.add('default-content-wrapper');\n      }\n      wrappers[wrappers.length - 1].append(e);\n    });\n    wrappers.forEach((wrapper) => section.append(wrapper));\n    section.classList.add('section');\n    section.dataset.sectionStatus = 'initialized';\n    section.style.display = 'none';\n\n    // Process section metadata\n    const sectionMeta = section.querySelector('div.section-metadata');\n    if (sectionMeta) {\n      const meta = readBlockConfig(sectionMeta);\n      Object.keys(meta).forEach((key) => {\n        if (key === 'style') {\n          const styles = meta.style\n            .split(',')\n            .filter((style) => style)\n            .map((style) => toClassName(style.trim()));\n          styles.forEach((style) => section.classList.add(style));\n        } else {\n          section.dataset[toCamelCase(key)] = meta[key];\n        }\n      });\n      sectionMeta.parentNode.remove();\n    }\n  });\n}\n\n/**\n * Builds a block DOM Element from a two dimensional array, string, or object\n * @param {string} blockName name of the block\n * @param {*} content two dimensional array or string or object of content\n */\nfunction buildBlock(blockName, content) {\n  const table = Array.isArray(content) ? content : [[content]];\n  const blockEl = document.createElement('div');\n  // build image block nested div structure\n  blockEl.classList.add(blockName);\n  table.forEach((row) => {\n    const rowEl = document.createElement('div');\n    row.forEach((col) => {\n      const colEl = document.createElement('div');\n      const vals = col.elems ? col.elems : [col];\n      vals.forEach((val) => {\n        if (val) {\n          if (typeof val === 'string') {\n            colEl.innerHTML += val;\n          } else {\n            colEl.appendChild(val);\n          }\n        }\n      });\n      rowEl.appendChild(colEl);\n    });\n    blockEl.appendChild(rowEl);\n  });\n  return blockEl;\n}\n\n/**\n * Loads JS and CSS for a block.\n * @param {Element} block The block element\n */\nasync function loadBlock(block) {\n  const status = block.dataset.blockStatus;\n  if (status !== 'loading' && status !== 'loaded') {\n    block.dataset.blockStatus = 'loading';\n    const { blockName } = block.dataset;\n    try {\n      const cssLoaded = loadCSS(`${window.hlx.codeBasePath}/blocks/${blockName}/${blockName}.css`);\n      const decorationComplete = new Promise((resolve) => {\n        (async () => {\n          try {\n            const mod = await import(\n              `${window.hlx.codeBasePath}/blocks/${blockName}/${blockName}.js`\n            );\n            if (mod.default) {\n              await mod.default(block);\n            }\n          } catch (error) {\n            // eslint-disable-next-line no-console\n            console.log(`failed to load module for ${blockName}`, error);\n          }\n          resolve();\n        })();\n      });\n      await Promise.all([cssLoaded, decorationComplete]);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(`failed to load block ${blockName}`, error);\n    }\n    block.dataset.blockStatus = 'loaded';\n  }\n  return block;\n}\n\n/**\n * Decorates a block.\n * @param {Element} block The block element\n */\nfunction decorateBlock(block) {\n  const shortBlockName = block.classList[0];\n  if (shortBlockName) {\n    block.classList.add('block');\n    block.dataset.blockName = shortBlockName;\n    block.dataset.blockStatus = 'initialized';\n    wrapTextNodes(block);\n    const blockWrapper = block.parentElement;\n    blockWrapper.classList.add(`${shortBlockName}-wrapper`);\n    const section = block.closest('.section');\n    if (section) section.classList.add(`${shortBlockName}-container`);\n  }\n}\n\n/**\n * Decorates all blocks in a container element.\n * @param {Element} main The container element\n */\nfunction decorateBlocks(main) {\n  main.querySelectorAll('div.section > div > div').forEach(decorateBlock);\n}\n\n/**\n * Loads a block named 'header' into header\n * @param {Element} header header element\n * @returns {Promise}\n */\nasync function loadHeader(header) {\n  const headerBlock = buildBlock('header', '');\n  header.append(headerBlock);\n  decorateBlock(headerBlock);\n  return loadBlock(headerBlock);\n}\n\n/**\n * Loads a block named 'footer' into footer\n * @param footer footer element\n * @returns {Promise}\n */\nasync function loadFooter(footer) {\n  const footerBlock = buildBlock('footer', '');\n  footer.append(footerBlock);\n  decorateBlock(footerBlock);\n  return loadBlock(footerBlock);\n}\n\n/**\n * Wait for Image.\n * @param {Element} section section element\n */\nasync function waitForFirstImage(section) {\n  const lcpCandidate = section.querySelector('img');\n  await new Promise((resolve) => {\n    if (lcpCandidate && !lcpCandidate.complete) {\n      lcpCandidate.setAttribute('loading', 'eager');\n      lcpCandidate.addEventListener('load', resolve);\n      lcpCandidate.addEventListener('error', resolve);\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * Loads all blocks in a section.\n * @param {Element} section The section element\n */\n\nasync function loadSection(section, loadCallback) {\n  const status = section.dataset.sectionStatus;\n  if (!status || status === 'initialized') {\n    section.dataset.sectionStatus = 'loading';\n    const blocks = [...section.querySelectorAll('div.block')];\n    for (let i = 0; i < blocks.length; i += 1) {\n      // eslint-disable-next-line no-await-in-loop\n      await loadBlock(blocks[i]);\n    }\n    if (loadCallback) await loadCallback(section);\n    section.dataset.sectionStatus = 'loaded';\n    section.style.display = null;\n  }\n}\n\n/**\n * Loads all sections.\n * @param {Element} element The parent element of sections to load\n */\n\nasync function loadSections(element) {\n  const sections = [...element.querySelectorAll('div.section')];\n  for (let i = 0; i < sections.length; i += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    await loadSection(sections[i]);\n    if (i === 0 && sampleRUM.enhance) {\n      sampleRUM.enhance();\n    }\n  }\n}\n\ninit();\n\nexport {\n  buildBlock,\n  createOptimizedPicture,\n  decorateBlock,\n  decorateBlocks,\n  decorateButtons,\n  decorateIcons,\n  decorateSections,\n  decorateTemplateAndTheme,\n  getMetadata,\n  loadBlock,\n  loadCSS,\n  loadFooter,\n  loadHeader,\n  loadScript,\n  loadSection,\n  loadSections,\n  readBlockConfig,\n  sampleRUM,\n  setup,\n  toCamelCase,\n  toClassName,\n  waitForFirstImage,\n  wrapTextNodes,\n};\n"
    },
    ".github": {
        "workflows": {}
    },
    "fonts": {}
}